// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
    // Using a preview feature, because we need to use rawQueries (Prisma docs recommend TypedSQL) to accomplish searching for Notes
    // Prisma recommends not using preview features in production, but we have to use the above or full text search, which are both preview ¯\_(ツ)_/¯
    previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Note {
    id          String   @id @default(uuid())
    title       String
    content     String
    isPrivate   Boolean @default(false) 

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model User {
    id            String    @id @default(cuid())
    name          String    @unique
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    image         String?
    accounts      Account[]
    notes         Note[]
    sessions      Session[]
    passwordResets PasswordReset[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset {
    id        String   @id @default(cuid())
    userId    String
    token     String   @unique
    expiresAt DateTime
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

