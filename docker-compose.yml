services:
  traefik:
    image: "traefik:v3.3"
    container_name: "traefik"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
    ports:
      - "80:80"     # Neccessary for reverse proxy
      - "8080:8080" # For demonstration, that Middleware is running
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: notiz-anwendung
    volumes:
      - db_data:/var/lib/postgresql/data

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_CLIENTVAR: "clientvar"
    working_dir: /app
    image: t3-app
    environment:
      - DATABASE_URL=${DATABASE_COMPOSE_URL}
      - NEXTAUTH_URL=http://notes.localhost
      - AUTH_TRUST_HOST=TRUE
      - AUTH_SECRET=${AUTH_SECRET}
      - AUTH_DISCORD_ID=${AUTH_DISCORD_ID}
      - AUTH_DISCORD_SECRET=${AUTH_DISCORD_SECRET}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`notes.localhost`)"
      - "traefik.http.middlewares.app.ratelimit.average=50"
      - "traefik.http.middlewares.app.rateLimit.burst=100"
      - "traefik.http.routers.app.middlewares=app@docker"
    depends_on:
      - db
      - mailhog

  dbPusher: # npx prisma db push didn't work in the dockerfile, so we made it a service
    image: node:20-alpine
    working_dir: /app
    volumes:
      - .:/app
    environment:
      - DATABASE_URL=${DATABASE_COMPOSE_URL}
    depends_on:
      - db
    command: >
      sh -c "npm install && npx prisma db push"

  mailhog:
    image: mailhog/mailhog
    ports:
      - "8025:8025" # MailHog Web UI for password reset demonstration

volumes:
  db_data:
